Index: src/main/java/com/library/UserDashboard/Controller/UserDashboardController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.library.UserDashboard.Controller;\r\n\r\nimport com.google.gson.JsonArray;\r\nimport com.google.gson.JsonObject;\r\nimport com.library.GoogleBooks.GoogleBooksAPIClient;\r\nimport com.library.dao.*;\r\nimport com.library.models.Author;\r\nimport com.library.models.Document;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.control.Label;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Screen;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static com.library.utils.LoadImage.loadImageLazy;\r\n\r\npublic class UserDashboardController {\r\n\r\n        @FXML\r\n        private Button libraryButton; // Preserved for opening BookView\r\n\r\n        @FXML\r\n        private TextField searchField; // Search input field for book queries\r\n\r\n        @FXML\r\n        private VBox searchResultsContainer; // Container for displaying search results dynamically\r\n\r\n        @FXML\r\n        public void initialize() {\r\n                // Add event handler for the library button (existing feature)\r\n                libraryButton.setOnAction(event -> openBookView());\r\n\r\n                // Add listener for the search input field\r\n                searchField.setOnAction(event -> onSearchBooks());\r\n        }\r\n\r\n        // Opens BookView (existing feature)\r\n        private void openBookView() {\r\n                try {\r\n                        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/book_viewer.fxml\"));\r\n                        Parent bookView = loader.load();\r\n\r\n                        Stage stage = (Stage) libraryButton.getScene().getWindow();\r\n                        Scene scene = new Scene(bookView, 1466, 700);\r\n                        scene.getStylesheets().add(getClass().getResource(\"/css/styling.css\").toExternalForm());\r\n\r\n                        stage.setScene(scene);\r\n                        stage.show();\r\n                } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                }\r\n        }\r\n\r\n        // Handles book search based on user input\r\n        @FXML\r\n        private void onSearchBooks() {\r\n                String query = searchField.getText().trim();\r\n\r\n                if (!query.isEmpty()) {\r\n                        loadSearchResults(query);\r\n                } else {\r\n                        searchResultsContainer.getChildren().clear();\r\n                        Label noInputLabel = new Label(\"Please enter a search term.\");\r\n                        searchResultsContainer.getChildren().add(noInputLabel);\r\n                }\r\n        }\r\n\r\n        // Loads search results dynamically into the container\r\n        /*\r\n        private void loadSearchResults(String query) {\r\n                searchResultsContainer.getChildren().clear(); // Clear previous results\r\n                JsonArray books = GoogleBooksAPIClient.getBooks(query); // Fetch books from API\r\n\r\n                if (books != null && books.size() > 0) {\r\n                        for (int i = 0; i < books.size(); i++) {\r\n                                JsonObject book = books.get(i).getAsJsonObject().getAsJsonObject(\"volumeInfo\");\r\n\r\n                                HBox bookCard = new HBox();\r\n                                bookCard.setSpacing(10);\r\n                                bookCard.setStyle(\"-fx-padding: 10; -fx-border-color: #ddd; -fx-background-color: #fff; -fx-border-radius: 5; -fx-background-radius: 5;\");\r\n\r\n                                // Book Cover\r\n                                ImageView bookCover = new ImageView();\r\n                                bookCover.setFitWidth(100);\r\n                                bookCover.setFitHeight(150);\r\n                                if (book.has(\"imageLinks\")) {\r\n                                        String imageUrl = book.getAsJsonObject(\"imageLinks\").get(\"thumbnail\").getAsString();\r\n                                        bookCover.setImage(new Image(imageUrl, true));\r\n                                }\r\n\r\n                                // Book Information\r\n                                VBox bookInfo = new VBox();\r\n                                bookInfo.setSpacing(5);\r\n\r\n                                Label titleLabel = new Label(book.has(\"title\") ? book.get(\"title\").getAsString() : \"Unknown Title\");\r\n                                titleLabel.setStyle(\"-fx-font-size: 16px; -fx-font-weight: bold;\");\r\n\r\n                                Label authorLabel = new Label(book.has(\"authors\") ? String.join(\", \", book.getAsJsonArray(\"authors\").toString()) : \"Unknown Author\");\r\n                                Label pageLabel = new Label(book.has(\"pageCount\") ? book.get(\"pageCount\").getAsString() + \" pages\" : \"Page count not available\");\r\n\r\n                                Button viewDetailsButton = new Button(\"View Details\");\r\n                                viewDetailsButton.setOnAction(e -> showBookDetails(book));\r\n\r\n                                bookInfo.getChildren().addAll(titleLabel, authorLabel, pageLabel, viewDetailsButton);\r\n                                bookCard.getChildren().addAll(bookCover, bookInfo);\r\n\r\n                                searchResultsContainer.getChildren().add(bookCard);\r\n                        }\r\n                } else {\r\n                        Label noResultsLabel = new Label(\"No results found for \\\"\" + query + \"\\\".\");\r\n                        searchResultsContainer.getChildren().add(noResultsLabel);\r\n                }\r\n        }\r\n\r\n        */\r\n        /*ver 2 - load from db*/\r\n\r\n        private void loadSearchResults(String query) {\r\n                searchResultsContainer.getChildren().clear();\r\n                DocumentDao documentDao = new DocumentDao();\r\n                //List<Document> documents = documentDao.searchByTitle(query);\r\n\r\n                // Lọc danh sách dựa trên từ khóa tìm kiếm\r\n//                List<Document> filteredDocuments = documents.stream()\r\n//                        .filter(doc -> doc.getTitle() != null && doc.getTitle().toLowerCase().contains(query.toLowerCase()))\r\n//                        .collect(Collectors.toList());\r\n                List<Document> filteredDocuments = documentDao.searchByTitle(query);\r\n\r\n                if (!filteredDocuments.isEmpty()) {\r\n                        for (Document document : filteredDocuments) {\r\n                                HBox bookCard = new HBox();\r\n                                bookCard.setSpacing(10);\r\n                                bookCard.setStyle(\"-fx-padding: 10; -fx-border-color: #ddd; -fx-background-color: #fff; -fx-border-radius: 5; -fx-background-radius: 5;\");\r\n\r\n                                // Ảnh bìa sách\r\n                                ImageView bookCover = new ImageView();\r\n                                bookCover.setFitWidth(100);\r\n                                bookCover.setFitHeight(150);\r\n                                if (document.getImageLink() != null && !document.getImageLink().isEmpty()) {\r\n                                        bookCover.setImage(new Image(document.getImageLink(), true));\r\n                                        //aspect ratio of the image will be preserved ì true\r\n\r\n\r\n                                       // loadImageLazy(document.getImageLink(), bookCover);\r\n                                } else {\r\n                                        bookCover.setImage(new Image(\"/ui/admindashboard/book1.png\", true));\r\n                                }\r\n\r\n                                // Thông tin sách\r\n                                VBox bookInfo = new VBox();\r\n                                bookInfo.setSpacing(5);\r\n\r\n                                Label titleLabel = new Label(document.getTitle() != null ? document.getTitle() : \"Unknown Title\");\r\n                                titleLabel.setStyle(\"-fx-font-size: 16px; -fx-font-weight: bold;\");\r\n\r\n                                //Label authorLabel = new Label(\"Author ID: \" + document.getAuthorId());\r\n                                //DocumentDao documentDao = new DocumentDao();\r\n                                Author author = documentDao.getAuthor(document.getAuthorId());\r\n                                String authorName = (author != null) ? author.getName() : \"Unknown Author\";\r\n\r\n                                Label authorLabel = new Label(authorName);\r\n                                authorLabel.getStyleClass().add(\"book-author\");\r\n\r\n                                Label pageLabel = new Label(document.getPage() > 0 ? document.getPage() + \" pages\" : \"Page count not available\");\r\n\r\n                                Button viewDetailsButton = new Button(\"View Details\");\r\n                                viewDetailsButton.setOnAction(e -> showBookDetails(document));\r\n\r\n                                bookInfo.getChildren().addAll(titleLabel, authorLabel, pageLabel, viewDetailsButton);\r\n                                bookCard.getChildren().addAll(bookCover, bookInfo);\r\n\r\n                                searchResultsContainer.getChildren().add(bookCard);\r\n                        }\r\n                } else {\r\n                        Label noResultsLabel = new Label(\"No results found for \\\"\" + query + \"\\\".\");\r\n                        searchResultsContainer.getChildren().add(noResultsLabel);\r\n                }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // Displays book details (You can customize this method to open a modal or a detailed view\r\n\r\n        private void showBookDetails(Document document) {\r\n                // Tạo cửa sổ chi tiết\r\n                Stage detailStage = new Stage();\r\n                detailStage.setTitle(\"Book Details\");\r\n\r\n                // Tạo GridPane cho bố cục\r\n                GridPane detailContainer = new GridPane();\r\n                detailContainer.getStyleClass().add(\"detail-container\");\r\n                detailContainer.setHgap(10);\r\n                detailContainer.setVgap(10);\r\n                detailContainer.setPadding(new Insets(20));\r\n\r\n                // Tạo ImageView để hiển thị bìa sách\r\n                ImageView bookCover = new ImageView();\r\n                bookCover.setFitWidth(150);\r\n                bookCover.setFitHeight(200);\r\n                bookCover.setPreserveRatio(true);\r\n                if (document.getImageLink() != null && !document.getImageLink().isEmpty()) {\r\n                        bookCover.setImage(new Image(document.getImageLink(), true));\r\n                } else {\r\n                        bookCover.setImage(new Image(\"/ui/admindashboard/book1.png\")); // Ảnh mặc định nếu không có\r\n                }\r\n\r\n                // Tạo các nhãn hiển thị thông tin\r\n                Label titleValue = new Label(document.getTitle() != null ? document.getTitle() : \"Unknown\");\r\n                titleValue.getStyleClass().add(\"book-title\");\r\n                titleValue.setWrapText(true); // Enable wrapping\r\n\r\n                // Lấy tên tác giả từ DocumentDao\r\n                DocumentDao documentDao = new DocumentDao();\r\n                Author author = documentDao.getAuthor(document.getAuthorId());\r\n                String authorName = (author != null) ? author.getName() : \"Unknown Author\";\r\n\r\n                Label authorValue = new Label(authorName);\r\n                authorValue.getStyleClass().add(\"book-author\");\r\n\r\n                Label yearValue = new Label(String.valueOf(document.getPublicationYear()));\r\n                yearValue.getStyleClass().add(\"book-date\");\r\n\r\n                Label descriptionValue = new Label(document.getDescription() != null ? document.getDescription() : \"No description available\");\r\n                descriptionValue.getStyleClass().add(\"book-description\");\r\n                descriptionValue.setWrapText(true);\r\n\r\n                // Tạo nút Back\r\n                Button backButton = new Button(\"Back\");\r\n                backButton.getStyleClass().add(\"back-button\");\r\n                backButton.setOnAction(e -> detailStage.close());\r\n\r\n                // Đặt các phần tử vào GridPane\r\n                detailContainer.add(bookCover, 0, 0, 1, 6); // Ảnh bìa chiếm 6 dòng\r\n                detailContainer.add(titleValue, 2, 0);\r\n                detailContainer.add(authorValue, 2, 1);\r\n                detailContainer.add(yearValue, 2, 3);\r\n                detailContainer.add(descriptionValue, 2, 5);\r\n                detailContainer.add(backButton, 2, 6);\r\n\r\n                // Tạo StackPane để căn giữa nội dung\r\n                StackPane root = new StackPane(detailContainer);\r\n                root.setAlignment(Pos.CENTER); // Căn giữa nội dung\r\n                root.setPadding(new Insets(10)); // Padding nếu cần\r\n\r\n                // Tạo Scene và thêm CSS\r\n                Scene detailScene = new Scene(root, 715, 590);\r\n                detailScene.getStylesheets().add(getClass().getResource(\"/css/styling.css\").toExternalForm());\r\n\r\n                // Set Scene cho Stage\r\n                detailStage.setScene(detailScene);\r\n\r\n                // Đảm bảo Stage hiển thị ở giữa màn hình\r\n                detailStage.setOnShown(event -> {\r\n                        // Tính toán kích thước màn hình\r\n                        javafx.geometry.Rectangle2D screenBounds = Screen.getPrimary().getVisualBounds();\r\n\r\n                        // Đặt vị trí chính giữa\r\n                        detailStage.setX((screenBounds.getWidth() - detailStage.getWidth()) / 2);\r\n                        detailStage.setY((screenBounds.getHeight() - detailStage.getHeight()) / 2);\r\n                });\r\n\r\n                // Hiển thị cửa sổ\r\n                detailStage.show();\r\n        }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/library/UserDashboard/Controller/UserDashboardController.java b/src/main/java/com/library/UserDashboard/Controller/UserDashboardController.java
--- a/src/main/java/com/library/UserDashboard/Controller/UserDashboardController.java	(revision af1d91f8e92cc0fc2a8c9ef40466dd42a3060c13)
+++ b/src/main/java/com/library/UserDashboard/Controller/UserDashboardController.java	(date 1732354110884)
@@ -181,6 +181,8 @@
                                 Label pageLabel = new Label(document.getPage() > 0 ? document.getPage() + " pages" : "Page count not available");
 
                                 Button viewDetailsButton = new Button("View Details");
+                                viewDetailsButton.getStyleClass().add("back-button");
+
                                 viewDetailsButton.setOnAction(e -> showBookDetails(document));
 
                                 bookInfo.getChildren().addAll(titleLabel, authorLabel, pageLabel, viewDetailsButton);
